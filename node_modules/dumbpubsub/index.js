var events = require('events');
var util = require('util');
var _ = require('underscore');
var request = require('request');

var DumbPubSub = function() {
    var self = this;

    self.server = null;

    self.eventPostKey = null;

    self.notifyEvent = function(key) {
        if (!key) {
            key = 'event';
        }

        self.eventPostKey = key;
    }

    self.attach = function(server) {
        self.server = server;
    };

    // An object containing events, each event containing an array of URLs
    self.subscriptions = {
        //'client-update': [
            //'http://localhost/x',
            //'http://localhost/y',
        //],
        //'client-delete': [
            //'http://localhost/x',
        //],
    };

    /**
     * Begins listening on the provided root URL
     * root ~= /subscribe
     */
    self.listen = function(root) {
        if (!self.server) {
            console.warn('You need to attach a server before listening.');
            return;
        }

        /**
         * GET /subscribe
         * Returns all subscriptions
         * Example: [ { 'event': 'a', 'url': 'y' }, { 'event': 'b', 'url': 'y' } ] || []
         *
         * GET /subscribe?event=client-delete
         * Returns all subscriptions listening for client-delete
         * Example: [ { 'event': 'X', 'url': 'y' }, { 'event': 'X', 'url': 'y' } ] || []
         *
         * GET /subscribe?event=client-delete&url=http://localhost/listener
         * Returns all subscriptions listening for client-delete on this URL (1 or 0)
         * Example: [ { 'event': 'X', 'url': 'y' } ] || []
         */
        self.server.get(root, function(req, res) {
            // Read 'event' and 'url' get params
            var requestedEvent = req.query.event;
            if (!requestedEvent) {
                var parsedData = [];
                _.each(self.subscriptions, function(urls, eventName) {
                    _.each(urls, function(url) {
                        parsedData.push({
                            'event': eventName,
                            'url': url
                        });
                    });
                });
                res.send(parsedData);
                return;
            }

            var url = req.query.url || null;
            var event = self.subscriptions[requestedEvent];

            if (!event) {
                // We got an event from the user, but we don't have any URLs subscribing to it
                res.send([]);
                return;
            } else if (event && !url) {
                // User asked for a real event, and didn't ask for a specific URL
                var parsedData = [];
                _.each(event, function(url) {
                    parsedData.push({
                        'event': requestedEvent,
                        'url': url
                    });
                });
                res.send(parsedData);
                return;
            } else if (event && url) {
                // User is basically checking to see if they registered a specific callback
                var found = false;
                _.each(event, function(x) {
                    if (x === url) {
                        res.send({
                            'event': requestedEvent,
                            'url': url
                        });
                        found = true;
                        return;
                    }
                });
                if (!found) {
                    res.send([]);
                }
            }
        });

        self.server.delete(root, function(req, res) {
            // read 'event' and 'url' params. Is there a such things as a delete param? like a post param?
            var eventName = req.body.event || req.param.event || null;
            var url = req.body.url || req.param.url || null;
            if (!eventName) {
                // Delete all the things!
                if (_.isEmpty(self.subscriptions)) {
                    res.send(404);
                } else {
                    self.subscriptions = {};
                    res.send(200);
                }
                return;
            } else if (eventName && !url) {
                // Delete all URLs listenting to a specific event
                if (_.isEmpty(self.subscriptions[eventName])) {
                    res.send(404);
                } else {
                    delete self.subscriptions[eventName];
                    res.send(200);
                }
                return;
            } else if (eventName && url) {
                // This person knows exactly what to remove
                var event = self.subscriptions[eventName];
                if (!event) {
                    res.send(404);
                } else if (event) {
                    var urlIndex = event.indexOf(url);
                    if (urlIndex >= 0) {
                        event.splice(urlIndex, 1);
                        res.send(200);
                        if (_.isEmpty(event)) {
                            // Looks like this is the last URL within that event, might as well kill it
                            delete self.subscriptions[eventName];
                        }
                    } else {
                        // Oh man, they tried to delete an event/url combo we just don't have
                        res.send(404);
                    }
                }
                return;
            }
        });

        self.server.post(root, function(req, res) {
            // read 'event' and 'url' post params
            var event = req.body.event;
            var url = req.body.url;
            if (self.subscriptions[event] && self.subscriptions[event].indexOf(url) >= 0) {
                // Already have this event/url combo? Giddyup 409
                res.send(409);
                return;
            }

            self.subscribe(event, url);

            res.send(201);
        });
    };

    self.restore = function(dataStore) {
        // read old entries from disk, doing a bunch of subscribe calls
    };

    self.subscribe = function(event, url) {
        // Adds a subscription to out list of subscriptions
        if (!self.subscriptions[event]) {
            // This is the first time we've encountered this event, better add it to the list
            self.subscriptions[event] = [];
        }
        self.subscriptions[event].push(url);
    };

    self.emit = function(event, data) {
        // Emits an event to our URLs. I was going to use EventEmitter but now I'm not sure...
        var urls = self.subscriptions[event];
        if (!urls || !urls.length) {
            // No URLs to report to
            return;
        }

        // If we want to tell the client the key we add it to the payload
        if (self.eventPostKey) {
            data[self.eventPostKey] = event;
        }

        _.each(urls, function(url) {
            request.post(url, {form: data});
        });
    };
};

module.exports = new DumbPubSub();
